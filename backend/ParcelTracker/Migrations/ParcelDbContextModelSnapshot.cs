// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelTracker;

namespace ParcelTracker.Migrations
{
    [DbContext(typeof(ParcelDbContext))]
    partial class ParcelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParcelTracker.Models.Database.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.ParcelState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.HasIndex("StateId");

                    b.ToTable("ParcelStates");
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The parcel has been created.",
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The parcel is currently in transit.",
                            Name = "InTransit"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The parcel is currently in being sorted.",
                            Name = "Sorting"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The parcel has been sorted and is awaiting delivery.",
                            Name = "Sorted"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The parcel is out for delivery.",
                            Name = "OutForDelivery"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The parcel has been delivered.",
                            Name = "Delivered"
                        });
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.Parcel", b =>
                {
                    b.OwnsOne("ParcelTracker.Models.Database.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(50)");

                            b1.HasKey("ParcelId");

                            b1.ToTable("Parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId");
                        });

                    b.OwnsOne("ParcelTracker.Models.Database.Address", "ReturnAddress", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(50)");

                            b1.HasKey("ParcelId");

                            b1.ToTable("Parcels");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId");
                        });

                    b.Navigation("DeliveryAddress");

                    b.Navigation("ReturnAddress");
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.ParcelState", b =>
                {
                    b.HasOne("ParcelTracker.Models.Database.Parcel", "Parcel")
                        .WithMany("ParcelStates")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelTracker.Models.Database.State", "State")
                        .WithMany("ParcelStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.Parcel", b =>
                {
                    b.Navigation("ParcelStates");
                });

            modelBuilder.Entity("ParcelTracker.Models.Database.State", b =>
                {
                    b.Navigation("ParcelStates");
                });
#pragma warning restore 612, 618
        }
    }
}
